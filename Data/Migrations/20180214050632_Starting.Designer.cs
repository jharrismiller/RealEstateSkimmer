// <auto-generated />
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Data.Migrations
{
    [DbContext(typeof(RealEstateContext))]
    [Migration("20180214050632_Starting")]
    partial class Starting
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Data.Model.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(150);

                    b.Property<string>("Address2")
                        .HasMaxLength(50);

                    b.Property<int?>("Baths");

                    b.Property<int?>("Beds");

                    b.Property<string>("City")
                        .HasMaxLength(100);

                    b.Property<byte?>("PropertyStatusId");

                    b.Property<byte?>("PropertyTypeId");

                    b.Property<string>("RealtorUrl")
                        .HasMaxLength(550);

                    b.Property<string>("State")
                        .HasMaxLength(50);

                    b.Property<string>("Zip")
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.HasIndex("PropertyStatusId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Data.Model.PropertyStatus", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PropertyStatus");
                });

            modelBuilder.Entity("Data.Model.PropertyTag", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PropertyTag");
                });

            modelBuilder.Entity("Data.Model.PropertyTags", b =>
                {
                    b.Property<int>("PropertyId");

                    b.Property<byte>("PropertyTagId");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("PropertyId", "PropertyTagId");

                    b.HasIndex("PropertyTagId");

                    b.ToTable("PropertyTags");
                });

            modelBuilder.Entity("Data.Model.PropertyType", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("PropertyType");
                });

            modelBuilder.Entity("Data.Model.Property", b =>
                {
                    b.HasOne("Data.Model.PropertyStatus", "PropertyStatus")
                        .WithMany()
                        .HasForeignKey("PropertyStatusId");

                    b.HasOne("Data.Model.PropertyType", "PropertyType")
                        .WithMany()
                        .HasForeignKey("PropertyTypeId");
                });

            modelBuilder.Entity("Data.Model.PropertyTags", b =>
                {
                    b.HasOne("Data.Model.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Data.Model.PropertyTag", "PropertyTag")
                        .WithMany()
                        .HasForeignKey("PropertyTagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
